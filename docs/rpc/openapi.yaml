openapi: 3.1.0
servers:
  - url: http://localhost:20443
    description: Local
info:
  title: Stacks 3.0+ RPC API
  version: "1.0.0"
  description: |
    This is the documentation for the `stacks-node` RPC interface.
  license:
    name: CC-0
    url: https://creativecommons.org/publicdomain/zero/1.0/

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Authentication token for administrative operations

paths:
  /v2/transactions:
    post:
      summary: Broadcast raw transaction
      tags:
        - Transactions
      description: Broadcast raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js) project to generate a raw transaction payload.
      operationId: post_core_node_transactions
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
            example: binary format of 00000000010400bed38c2aadffa348931bcb542880ff79d607afec000000000000000000000000000000c800012b0b1fff6cccd0974966dcd665835838f0985be508e1322e09fb3d751eca132c492bda720f9ef1768d14fdabed6127560ba52d5e3ac470dcb60b784e97dc88c9030200000000000516df0ba3e79792be7be5e50a370289accfc8c9e032000000000000303974657374206d656d6f00000000000000000000000000000000000000000000000000
          application/json:
            schema:
              type: object
              required: ["tx"]
              properties:
                tx:
                  type: string
                  description: Hex-encoded transaction
                attachment:
                  type: string
                  description: Optional hex-encoded attachment for contract-call transactions
            example:
              tx: "00000000010400bed38c2aadffa348931bcb542880ff79d607afec..."
              attachment: "68656c6c6f20776f726c64"
      responses:
        "200":
          description: Transaction ID of successful post of a raw tx to the node's mempool
          content:
            text/plain:
              schema:
                type: string
                example: '"e161978626f216b2141b156ade10501207ae535fa365a13ef5d7a7c9310a09f2"'
        "400":
          description: Rejections result in a 400 error
          content:
            application/json:
              schema:
                $ref: ./api/transaction/post-core-node-transactions-error.schema.json
              example:
                $ref: ./api/transaction/post-core-node-transactions-error.example.json

  /v2/contracts/interface/{contract_address}/{contract_name}:
    get:
      summary: Get contract interface
      description: Get contract interface using a `contract_address` and `contract name`
      tags:
        - Smart Contracts
      operationId: get_contract_interface
      responses:
        "200":
          description: Contract interface
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-contract-interface.schema.json
              example:
                $ref: ./api/core-node/get-contract-interface.example.json
    parameters:
      - $ref: ./parameters/contract-address.parameter.json
      - $ref: ./parameters/contract-name.parameter.json
      - $ref: ./parameters/tip.parameter.json
  /v2/map_entry/{contract_address}/{contract_name}/{map_name}:
    post:
      summary: Get specific data-map inside a contract
      tags:
        - Smart Contracts
      operationId: get_contract_data_map_entry
      description: |
        Attempt to fetch data from a contract data map. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The map is identified with [Map Name].

        The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.

        In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-contract-data-map-entry.schema.json
              example:
                $ref: ./api/core-node/get-contract-data-map-entry.example.json
        "400":
          description: Failed loading data map
      parameters:
        - $ref: ./parameters/contract-address.parameter.json
        - $ref: ./parameters/contract-name.parameter.json
        - name: map_name
          in: path
          required: true
          description: Map name
          schema:
            type: string
        - $ref: ./parameters/proof.parameter.json
        - $ref: ./parameters/tip.parameter.json
      x-codegen-request-body-name: key
      requestBody:
        description: Hex string serialization of the lookup key (which should be a Clarity value)
        required: true
        content:
          application/json:
            schema:
              type: string

  /v2/contracts/source/{contract_address}/{contract_name}:
    get:
      summary: Get contract source
      tags:
        - Smart Contracts
      operationId: get_contract_source
      description: Returns the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-contract-source.schema.json
              example:
                $ref: ./api/core-node/get-contract-source.example.json
    parameters:
      - $ref: ./parameters/contract-address.parameter.json
      - $ref: ./parameters/contract-name.parameter.json
      - $ref: ./parameters/proof.parameter.json
      - $ref: ./parameters/tip.parameter.json

  /v2/contracts/call-read/{contract_address}/{contract_name}/{function_name}:
    post:
      summary: Call read-only function
      tags:
        - Smart Contracts
      operationId: call_read_only_function
      description: |
        Call a read-only public function on a given smart contract.

        The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: ./api/contract/post-call-read-only-fn.schema.json
              examples:
                success:
                  $ref: ./api/contract/post-call-read-only-fn-success.example.json
                fail:
                  $ref: ./api/contract/post-call-read-only-fn-fail.example.json
      parameters:
        - $ref: ./parameters/contract-address.parameter.json
        - $ref: ./parameters/contract-name.parameter.json
        - name: function_name
          in: path
          required: true
          description: Function name
          schema:
            type: string
        - $ref: ./parameters/tip.parameter.json
      requestBody:
        description: map of arguments and the simulated tx-sender where sender is either a Contract identifier or a normal Stacks address, and arguments is an array of hex serialized Clarity values.
        required: true
        content:
          application/json:
            schema:
              $ref: "./entities/contracts/read-only-function-args.schema.json"
              example:
                sender: "SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info"
                arguments:
                  - "0x0011..."
                  - "0x00231..."

  /v2/accounts/{principal}:
    get:
      summary: Get account info
      tags:
        - Accounts
      operationId: get_account_info
      description: |
        Get the account data for the provided principal

        Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is a unsigned 64-bit integer, and the proofs are provided as hex strings.

        For non-existent accounts, this does not 404, rather it returns an object with balance and nonce of 0.
      parameters:
        - $ref: ./parameters/principal.parameter.json
        - $ref: ./parameters/proof.parameter.json
        - $ref: ./parameters/tip.parameter.json
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-account-data.schema.json
              example:
                $ref: ./api/core-node/get-account-data.example.json

  /v2/fees/transaction:
    post:
      summary: Get approximate fees for the given transaction
      tags:
        - Fees
      description: |
        Get an estimated fee for the supplied transaction.  This
        estimates the execution cost of the transaction, the current
        fee rate of the network, and returns estimates for fee
        amounts.

        * `transaction_payload` is a hex-encoded serialization of
          the TransactionPayload for the transaction.
        * `estimated_len` is an optional argument that provides the
          endpoint with an estimation of the final length (in bytes)
          of the transaction, including any post-conditions and
          signatures

        If the node cannot provide an estimate for the transaction
        (e.g., if the node has never seen a contract-call for the
        given contract and function) or if estimation is not
        configured on this node, a 400 response is returned.
        The 400 response will be a JSON error containing a `reason`
        field which can be one of the following:

        * `DatabaseError` - this Stacks node has had an internal
          database error while trying to estimate the costs of the
          supplied transaction.
        * `NoEstimateAvailable` - this Stacks node has not seen this
          kind of contract-call before, and it cannot provide an
          estimate yet.
        * `CostEstimationDisabled` - this Stacks node does not perform
          fee or cost estimation, and it cannot respond on this
          endpoint.

        The 200 response contains the following data:

        * `estimated_cost` - the estimated multi-dimensional cost of
          executing the Clarity VM on the provided transaction.
        * `estimated_cost_scalar` - a unitless integer that the Stacks
          node uses to compare how much of the block limit is consumed
          by different transactions. This value incorporates the
          estimated length of the transaction and the estimated
          execution cost of the transaction. The range of this integer
          may vary between different Stacks nodes. In order to compute
          an estimate of total fee amount for the transaction, this
          value is multiplied by the same Stacks node's estimated fee
          rate.
        * `cost_scalar_change_by_byte` - a float value that indicates how
          much the `estimated_cost_scalar` value would increase for every
          additional byte in the final transaction.
        * `estimations` - an array of estimated fee rates and total fees to
          pay in microSTX for the transaction. This array provides a range of
          estimates (default: 3) that may be used. Each element of the array
          contains the following fields:
            * `fee_rate` - the estimated value for the current fee
              rates in the network
            * `fee` - the estimated value for the total fee in
              microSTX that the given transaction should pay. These
              values are the result of computing:
              `fee_rate` x `estimated_cost_scalar`.
              If the estimated fees are less than the minimum relay
              fee `(1 ustx x estimated_len)`, then that minimum relay
              fee will be returned here instead.


        Note: If the final transaction's byte size is larger than
        supplied to `estimated_len`, then applications should increase
        this fee amount by:

          `fee_rate` x `cost_scalar_change_by_byte` x (`final_size` - `estimated_size`)

      operationId: post_fee_transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./api/core-node/post-fee-transaction.schema.json
            example:
              $ref: ./api/core-node/post-fee-transaction.example.json
      responses:
        "200":
          description: Estimated fees for the transaction
          content:
            application/json:
              schema:
                $ref: ./api/core-node/post-fee-transaction-response.schema.json
              example:
                $ref: ./api/core-node/post-fee-transaction-response.example.json

  /v2/fees/transfer:
    get:
      summary: Get estimated fee
      tags:
        - Fees
      operationId: get_fee_transfer
      description: Get an estimated fee rate for STX transfer transactions. This is a fee rate per byte, returned as a JSON integer (microSTX per byte).
      responses:
        "200":
          description: Fee rate in microSTX per byte
          content:
            application/json:
              schema:
                type: integer
                minimum: 1
                description: Fee rate in microSTX per byte
              example: 123

  /v2/info:
    get:
      summary: Get Core API info
      description: Get Core API information
      tags:
        - Info
      operationId: get_core_api_info
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-info.schema.json
              example:
                $ref: ./api/core-node/get-info.example.json

  /v2/pox:
    get:
      summary: Get PoX details
      description: Get Proof of Transfer (PoX) information. Can be used for Stacking.
      tags:
        - Info
      operationId: get_pox_info
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-pox.schema.json
              example:
                $ref: ./api/core-node/get-pox.example.json
      parameters:
        - $ref: ./parameters/tip.parameter.json

  /v2/traits/{contract_address}/{contract_name}/{trait_contract_address}/{trait_contract_name}/{trait_name}:
    get:
      summary: Get trait implementation details
      description: Determine whether or not a specified trait is implemented (either explicitly or implicitly) within a given contract.
      tags:
        - Smart Contracts
      operationId: get_is_trait_implemented
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: ./api/trait/get-is-trait-implemented.schema.json
              example:
                $ref: ./api/trait/get-is-trait-implemented.example.json
        "404":
          description: Contract or trait not found.
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "No contract analysis found or trait definition not found"
    parameters:
      - $ref: ./parameters/contract-address.parameter.json
      - $ref: ./parameters/contract-name.parameter.json
      - name: trait_contract_address
        in: path
        required: true
        description: |
          Stacks address of the trait-defining contract.
        schema:
          type: string
          pattern: "^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{28,41}$"
          minLength: 28
          maxLength: 41
          example: "SP2Z1K16238380NBP4T38A4G10A90Q03JJ2C2003"
      - name: trait_contract_name
        in: path
        required: true
        description: |
          Contract name of the trait-defining contract.
        schema:
          type: string
          pattern: "^[a-zA-Z]([a-zA-Z0-9]|[-_]){0,127}$"
          minLength: 1
          maxLength: 128
          example: "some-trait"
      - name: trait_name
        in: path
        required: true
        description: Trait name, must conform to Clarity naming rules.
        schema:
          type: string
          pattern: "^([a-zA-Z0-9_]|[-!?+<>=/*]){1,128}$"
          minLength: 1
          maxLength: 128
      - $ref: ./parameters/tip.parameter.json

  /v2/clarity/marf/{marf_key_hash}:
    get:
      summary: Get the MARF value for a given key
      tags:
        - Smart Contracts
      operationId: get_clarity_marf_value
      description: |
        Attempt to fetch the value of a MARF key. The key is a 64-character hex string representing the MARF node hash.

        In the response, `data` is the hex serialization of the value.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-clarity-marf-value.schema.json
              example:
                $ref: ./api/core-node/get-clarity-marf-value.example.json
        "400":
          description: Invalid request, e.g., the hash string is not a valid 64-character hex string.
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "Invalid hash string"
        "404":
          description: The requested MARF key or chain tip could not be found.
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "Marf key hash not found"
      parameters:
        - name: marf_key_hash
          in: path
          required: true
          description: The 64-character hex-encoded hash of the MARF key.
          schema:
            type: string
            pattern: "^[0-9a-f]{64}$"
            minLength: 64
            maxLength: 64
        - $ref: ./parameters/proof.parameter.json
        - $ref: ./parameters/tip.parameter.json

  /v2/clarity/metadata/{contract_address}/{contract_name}/{clarity_metadata_key}:
    get:
      summary: Get the contract metadata for the metadata key
      tags:
        - Smart Contracts
      operationId: get_clarity_metadata_key
      description: |
        Attempt to fetch the metadata of a contract. The contract is identified with [Contract Address] and [Contract Name] in the URL path. The metadata key is identified with [Clarity Metadata Key].

        In the response, `data` is formatted as JSON.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-clarity-metadata.schema.json
              example:
                $ref: ./api/core-node/get-clarity-metadata.example.json
        400:
          description: Failed to retrieve constant value from contract
      parameters:
        - $ref: ./parameters/contract-address.parameter.json
        - $ref: ./parameters/contract-name.parameter.json
        - name: clarity_metadata_key
          in: path
          required: true
          description: Metadata key
          schema:
            type: string
        - $ref: ./parameters/tip.parameter.json

  /v2/constant_val/{contract_address}/{contract_name}/{constant_name}:
    get:
      summary: Get the value of a constant inside a contract
      tags:
        - Smart Contracts
      operationId: get_constant_val
      description: |
        Attempt to fetch the value of a constant inside a contract. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The constant is identified with [Constant Name].

        In the response, `data` is the hex serialization of the constant value.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-constant-val.schema.json
              example:
                $ref: ./api/core-node/get-constant-val.example.json
        "400":
          description: Failed to retrieve constant value from contract
      parameters:
        - $ref: ./parameters/contract-address.parameter.json
        - $ref: ./parameters/contract-name.parameter.json
        - name: constant_name
          in: path
          required: true
          description: Constant name
          schema:
            type: string
        - $ref: ./parameters/tip.parameter.json

  /v3/block_proposal:
    post:
      summary: Validate a proposed Stacks block
      tags:
        - Mining
      operationId: post_block_proposal
      description: |
        Used by stackers to validate a proposed Stacks block from a miner.

        **This API endpoint requires a basic Authorization header.**
      security:
        - bearerAuth: []
      responses:
        "202":
          description: Block proposal has been accepted for processing.
            The result will be returned via the event observer.
          content:
            application/json:
              example:
                $ref: ./api/core-node/post-block-proposal-response.example.json
        "400":
          description: Endpoint not enabled.
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "Block proposal endpoint is not enabled on this node."
        "401":
          description: Unauthorized. Invalid or missing authentication token.
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "Unauthorized"
        "429":
          description: There is an ongoing proposal validation being processed,
            the new request cannot be accepted until the prior request has been processed.
          content:
            application/json:
              example:
                $ref: ./api/core-node/post-block-proposal-response.429.json
      requestBody:
        content:
          application/json:
            example:
              $ref: ./api/core-node/post-block-proposal-req.example.json

  /v3/stacker_set/{cycle_number}:
    get:
      summary: Fetch the stacker and signer set information for a given cycle.
      tags:
        - Mining
      operationId: get_stacker_set
      description: |
        Used to get stacker and signer set information for a given cycle.

        This will only return information for cycles started in Epoch-2.5 where PoX-4 was active and subsequent cycles.
      parameters:
        - name: cycle_number
          in: path
          required: true
          description: reward cycle number
          schema:
            type: integer
      responses:
        "200":
          description: Information for the given reward cycle
          content:
            application/json:
              example:
                $ref: ./api/core-node/get_stacker_set.example.json
        "400":
          description: Could not fetch the given reward set
          content:
            application/json:
              example:
                $ref: ./api/core-node/get_stacker_set.400.example.json

  /v3/blocks/{block_id}:
    get:
      summary: Get Nakamoto block by ID
      tags:
        - Blocks
      operationId: get_block_v3
      description: |
        Get a specific Nakamoto block (Stacks 3.x+) by its index block hash. This endpoint streams
        the block data from the Nakamoto staging blocks database where Nakamoto blocks are stored
        with additional metadata including tenure information.

        **Compatibility**: Works with Nakamoto blocks only. For Stacks 2.x blocks, use `/v2/blocks/{block_id}`.
      parameters:
        - name: block_id
          in: path
          description: The block's ID hash
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The raw SIP-003-encoded block will be returned.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: The block could not be found
          content:
            text/plain:
              schema:
                type: string

  /v3/blocks/height/{block_height}:
    get:
      summary: Fetch a Nakamoto block by its height and optional tip
      tags:
        - Blocks
      operationId: get_block_v3_by_height
      description: Fetch a Nakamoto block by its height and optional tip.
      parameters:
        - name: block_height
          in: path
          description: The block's height
          required: true
          schema:
            type: integer
        - name: tip
          in: query
          schema:
            type: string
          description:
            The Stacks chain tip to query from. If tip == latest or empty, the query will be run
            from the latest known tip.
      responses:
        "200":
          description: The raw SIP-003-encoded block will be returned.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: The block could not be found
          content:
            text/plain:
              schema:
                type: string
              example: "No such block at height 12345"

  /v3/tenures/info:
    get:
      summary: Fetch metadata about the ongoing Nakamoto tenure
      tags:
        - Blocks
      operationId: get_tenure_info
      description: Fetch metadata about the ongoing Nakamoto tenure. This information is sufficient to obtain and authenticate the highest complete tenure, as well as obtain new tenure blocks.
      responses:
        "200":
          description: Metadata about the ongoing tenure
          content:
            application/json:
              example:
                $ref: ./api/core-node/get_tenure_info.json

  /v3/tenures/{block_id}:
    get:
      summary: Fetch a sequence of Nakamoto blocks in a tenure
      tags:
        - Blocks
      operationId: get_tenures
      description: Fetch a sequence of Nakamoto blocks in a tenure.  The blocks will be served in order from highest to lowest.  The blocks will be encoded in their SIP-003 wire format, and concatenated together.
      responses:
        "200":
          description: SIP-003-encoded Nakamoto blocks, concatenated together
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    parameters:
      - name: block_id
        in: path
        description: The tenure-start block ID of the tenure to query
        required: true
        schema:
          type: string
      - name: stop
        in: query
        description: The block ID hash of the highest block in this tenure that is already known to the caller.  Neither the corresponding block nor any of its ancestors will be served.  This is used to fetch tenure blocks that the caller does not have.
        required: false
        schema:
          type: string

  /v3/sortitions:
    get:
      summary: Get latest sortition information
      tags:
        - Blocks
      operationId: get_sortitions_latest
      description: |
        Get sortition information about the latest burnchain block processed by this node.
        Returns a single-element array with the latest sortition.
      responses:
        "200":
          description: Latest sortition information
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-sortitions-single.schema.json
              example:
                $ref: ./api/core-node/get_sortitions.example.json
        "404":
          description: Sortition not found for specified criteria
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json

  /v3/sortitions/latest_and_last:
    get:
      summary: Get latest and last winning sortitions
      tags:
        - Blocks
      operationId: get_sortitions_latest_and_last
      description: |
        Get sortition information about the latest burn block with a winning miner
        AND the previous such burn block. Returns an array with two sortition objects.
      responses:
        "200":
          description: Latest and last sortition information
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-sortitions.schema.json
              example:
                $ref: ./api/core-node/get_sortitions_latest_and_prior.example.json
        "404":
          description: Sortition not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json

  /v3/sortitions/consensus/{consensus_hash}:
    get:
      summary: Get sortition by consensus hash
      tags:
        - Blocks
      operationId: get_sortitions_by_consensus
      description: |
        Get sortition information for a specific consensus hash.
        Returns a single-element array with the matching sortition.
      parameters:
        - name: consensus_hash
          in: path
          required: true
          description: Hex-encoded consensus hash (40 characters)
          schema:
            type: string
            pattern: "^(0x)?[0-9a-f]{40}$"
      responses:
        "200":
          description: Sortition information for the consensus hash
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-sortitions-single.schema.json
              example:
                $ref: ./api/core-node/get_sortitions.example.json
        "404":
          description: Sortition not found for consensus hash
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json

  /v3/sortitions/burn/{burn_header_hash}:
    get:
      summary: Get sortition by burn header hash
      tags:
        - Blocks
      operationId: get_sortitions_by_burn_hash
      description: |
        Get sortition information for a specific burn header hash.
        Returns a single-element array with the matching sortition.
      parameters:
        - name: burn_header_hash
          in: path
          required: true
          description: Hex-encoded burn header hash (64 characters)
          schema:
            type: string
            pattern: "^(0x)?[0-9a-f]{64}$"
      responses:
        "200":
          description: Sortition information for the burn header hash
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-sortitions-single.schema.json
              example:
                $ref: ./api/core-node/get_sortitions.example.json
        "404":
          description: Sortition not found for burn header hash
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json

  /v3/sortitions/burn_height/{height}:
    get:
      summary: Get sortition by burn block height
      tags:
        - Blocks
      operationId: get_sortitions_by_height
      description: |
        Get sortition information for a specific burn block height.
        Returns a single-element array with the matching sortition.
      parameters:
        - name: height
          in: path
          required: true
          description: Burn block height (integer)
          schema:
            type: integer
            minimum: 0
      responses:
        "200":
          description: Sortition information for the burn block height
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-sortitions-single.schema.json
              example:
                $ref: ./api/core-node/get_sortitions.example.json
        "404":
          description: Sortition not found for burn block height
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json

  /v3/signer/{signer}/{cycle_number}:
    get:
      summary: Get number of blocks signed by signer during a given reward cycle
      tags:
        - Blocks
        - Signers
      operationId: get_signer
      description: Get number of blocks signed by signer during a given reward cycle
      parameters:
        - name: signer
          in: path
          required: true
          description: Hex-encoded compressed Secp256k1 public key of signer
          schema:
            type: string
        - name: cycle_number
          in: path
          required: true
          description: Reward cycle number
          schema:
            type: integer
      responses:
        200:
          description: Number of blocks signed
          content:
            application/json:
              schema:
                type: object
                properties:
                  blocks_signed:
                    type: integer
                    description: Number of blocks signed by this signer
                required:
                  - blocks_signed
              example:
                blocks_signed: 7
  /v3/transaction/{txid}:
    get:
      summary: Retrieve transaction details by TXID
      tags:
        - Transactions
      description: Get a JSON with the transaction details including the `index_block_hash`, the hex-encoded transaction body, and the `result`.
      operationId: get_transaction
      parameters:
        - name: txid
          in: path
          required: true
          description: Transaction ID
          schema:
            type: string
      responses:
        "200":
          description: Transaction JSON with index_block_hash, transaction body and result
          content:
            application/json:
              example:
                $ref: ./api/core-node/get_transaction.json
        "404":
          description: Transaction not found
          content:
            text/plain:
              schema:
                type: string
              example: "No such transaction 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
        "501":
          description: Transaction indexing not enabled
          content:
            text/plain:
              schema:
                type: string
              example: "Transaction indexing is not enabled"

  /v3/health:
    get:
      summary: Query the health of the node.
      description: |
        Get node health information.
        A node is considered healthy if its Stacks tip height matches the maximum Stacks tip height observed among its connected peers.
        This endpoint returns:
        - `difference_from_max_peer`: The difference in Stacks height between this node and its most advanced peer.
        - `max_stacks_height_of_neighbors`: The maximum Stacks height observed among the node's connected peers.
        - `node_stacks_tip_height`: The current Stacks tip height of this node.
      tags:
        - Info
      operationId: get_health
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-health.schema.json
              example:
                $ref: ./api/core-node/get-health.example.json
        500:
          description: |
            Failed to query for health (e.g., no data or no valid peers to query from).
            Only the `error` field will be set in this case, providing a message about the failure.
          content:
            application/json:
              schema:
                $ref: ./api/core-node/get-health-error.schema.json
              example:
                $ref: ./api/core-node/get-health-error.example.json

  /v2/attachments/{hash}:
    get:
      summary: Get attachment by hash
      tags:
        - Atlas
      operationId: get_attachment
      description: |
        Get an attachment by its hash. Attachments are content stored in the Atlas network.

        The attachment hash is a 40-character hex string (SHA-1 hash).
      parameters:
        - name: hash
          in: path
          required: true
          description: Hex-encoded SHA-1 hash of the attachment (40 characters)
          schema:
            type: string
            pattern: "^[0-9a-f]{40}$"
      responses:
        "200":
          description: The attachment content
          content:
            application/json:
              schema:
                type: object
                properties:
                  attachment:
                    type: string
                    format: byte # For base64 encoded binary data
                    description: The attachment data, base64 encoded.
                required:
                  - attachment
        "404":
          description: Attachment not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "NoSuchAttachment"

  /v2/attachments/inv:
    get:
      summary: Get attachment inventory
      tags:
        - Atlas
      operationId: get_attachments_inv
      description: |
        Get inventory of attachments for a given index block hash and page range.
        This returns a bitfield indicating which attachments are available.
      parameters:
        - name: index_block_hash
          in: query
          required: true
          description: Hex-encoded index block hash (64 characters)
          schema:
            type: string
            pattern: "^[0-9a-f]{64}$"
        - name: pages_indexes
          in: query
          required: true
          description: Comma-separated list of page indexes to query
          schema:
            type: string
            example: "1,2,3"
      responses:
        "200":
          description: Attachment inventory bitfield
          content:
            application/json:
              schema:
                type: object
                properties:
                  block_id:
                    type: string
                    description: Index block hash
                  pages:
                    type: object
                    additionalProperties:
                      type: string
                      description: Hex-encoded bitfield for the page
                example:
                  block_id: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
                  pages:
                    "1": "ff00ff00"
                    "2": "00ff00ff"
        "400":
          description: Bad request - missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "Invalid Http request: expecting index_block_hash and pages_indexes"

  /v2/microblocks/confirmed/{block_id}:
    get:
      summary: Get confirmed microblocks
      tags:
        - Blocks
        - Microblocks
      operationId: get_microblocks_confirmed
      description: |
        Get microblocks that were confirmed by the given anchored block.
        The microblocks are returned as a binary stream of concatenated microblock data.
      parameters:
        - name: block_id
          in: path
          required: true
          description: Hex-encoded Stacks block ID (64 characters)
          schema:
            type: string
            pattern: "^[0-9a-f]{64}$"
      responses:
        "200":
          description: Stream of confirmed microblocks
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Block not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "No such block"

  /v2/microblocks/{microblock_id}:
    get:
      summary: Get microblock by ID
      tags:
        - Blocks
        - Microblocks
      operationId: get_microblock
      description: |
        Get a specific microblock by its block hash.
        Returns the microblock as a binary stream.
      parameters:
        - name: microblock_id
          in: path
          required: true
          description: Hex-encoded microblock hash (64 characters)
          schema:
            type: string
            pattern: "^[0-9a-f]{64}$"
      responses:
        "200":
          description: The microblock data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Microblock not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "No such microblock"

  /v2/microblocks/unconfirmed/{block_id}/{seq}:
    get:
      summary: Get unconfirmed microblocks
      tags:
        - Blocks
        - Microblocks
      operationId: get_microblocks_unconfirmed
      description: |
        Get unconfirmed microblocks starting from a specific sequence number.
        The microblocks are returned as a binary stream.
      parameters:
        - name: block_id
          in: path
          required: true
          description: Hex-encoded parent block ID (64 characters)
          schema:
            type: string
            pattern: "^[0-9a-f]{64}$"
        - name: seq
          in: path
          required: true
          description: Starting sequence number (0-65535)
          schema:
            type: integer
            minimum: 0
            maximum: 65535
      responses:
        "200":
          description: Stream of unconfirmed microblocks
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Parent block not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "No such block"

  /v2/microblocks:
    post:
      summary: Submit microblock
      tags:
        - Blocks
        - Microblocks
      operationId: post_microblock
      description: |
        Submit a microblock to the node for validation and relay.
        The microblock must be provided in binary format.
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Microblock accepted
          content:
            text/plain:
              schema:
                type: string
                example: "Microblock accepted"
        "400":
          description: Invalid microblock
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "Invalid microblock"

  /v2/stackerdb/{principal}/{contract_name}/{slot_id}:
    get:
      summary: Get StackerDB chunk (latest version)
      tags:
        - StackerDB
      operationId: get_stackerdb_chunk
      description: |
        Get the latest version of a chunk of data from a StackerDB instance.
      parameters:
        - $ref: ./parameters/principal.parameter.json
        - $ref: ./parameters/contract-name.parameter.json
        - name: slot_id
          in: path
          required: true
          description: Slot ID
          schema:
            type: integer
            minimum: 0
      responses:
        "200":
          description: StackerDB chunk data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Chunk not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "NoSuchSlot"

  /v2/stackerdb/{principal}/{contract_name}/{slot_id}/{slot_version}:
    get:
      summary: Get StackerDB chunk (specific version)
      tags:
        - StackerDB
      operationId: get_stackerdb_chunk_versioned
      description: |
        Get a specific version of a chunk of data from a StackerDB instance.
      parameters:
        - $ref: ./parameters/principal.parameter.json
        - $ref: ./parameters/contract-name.parameter.json
        - name: slot_id
          in: path
          required: true
          description: Slot ID
          schema:
            type: integer
            minimum: 0
        - name: slot_version
          in: path
          required: true
          description: Specific slot version
          schema:
            type: integer
            minimum: 0
      responses:
        "200":
          description: StackerDB chunk data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Chunk not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "NoSuchSlot"

  /v2/stackerdb/{principal}/{contract_name}:
    get:
      summary: Get StackerDB metadata
      tags:
        - StackerDB
      operationId: get_stackerdb_metadata
      description: |
        Get metadata about a StackerDB instance, including slot information.
      parameters:
        - $ref: ./parameters/principal.parameter.json
        - $ref: ./parameters/contract-name.parameter.json
      responses:
        "200":
          description: StackerDB metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    slot_id:
                      type: integer
                    slot_version:
                      type: integer
                    data_hash:
                      type: string
                    data_size:
                      type: integer
                example:
                  - slot_id: 0
                    slot_version: 1
                    data_hash: "abcd1234..."
                    data_size: 1024
        "404":
          description: StackerDB not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "NoSuchStackerDB"
    post:
      summary: Write StackerDB chunk
      tags:
        - StackerDB
      operationId: post_stackerdb_chunk
      description: |
        Write a chunk of data to a StackerDB instance.
      parameters:
        - $ref: ./parameters/principal.parameter.json
        - $ref: ./parameters/contract-name.parameter.json
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Chunk written successfully
          content:
            text/plain:
              schema:
                type: string
                example: "OK"
        "400":
          description: Invalid chunk data
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "InvalidChunk"

  /v2/stackerdb/{principal}/{contract_name}/replicas:
    get:
      summary: List StackerDB replicas
      tags:
        - StackerDB
      operationId: list_stackerdb_replicas
      description: |
        Get a list of replicas for a StackerDB instance.
      parameters:
        - $ref: ./parameters/principal.parameter.json
        - $ref: ./parameters/contract-name.parameter.json
      responses:
        "200":
          description: List of StackerDB replicas
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    peer_addr:
                      type: string
                    public_key:
                      type: string
                example:
                  - peer_addr: "127.0.0.1:20444"
                    public_key: "03abc123..."
        "404":
          description: StackerDB not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "NoSuchStackerDB"

  /v2/data_var/{principal}/{contract_name}/{var_name}:
    get:
      summary: Get contract data variable
      tags:
        - Smart Contracts
      operationId: get_contract_data_var
      description: |
        Fetch a data variable from a smart contract.
        Returns the raw hex-encoded value of the variable.
      parameters:
        - $ref: ./parameters/principal.parameter.json
        - $ref: ./parameters/contract-name.parameter.json
        - name: var_name
          in: path
          required: true
          description: Variable name
          schema:
            type: string
        - $ref: ./parameters/proof.parameter.json
        - $ref: ./parameters/tip.parameter.json
      responses:
        "200":
          description: The data variable value
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    description: Hex-encoded variable value
                  proof:
                    type: string
                    description: MARF proof (optional)
                example:
                  data: "0x01ce..."
                  proof: "0x01ab..."
        "404":
          description: Variable not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "NoSuchDataVariable"

  /v2/headers/{count}:
    get:
      summary: Get block headers
      tags:
        - Blocks
      operationId: get_block_headers
      description: |
        Get a number of ancestral Stacks block headers, in order from newest to oldest.
        If the tip query parameter is given, the headers will be loaded from that block.
        Up to 2100 headers (one PoX reward cycle) may be returned.
      parameters:
        - name: count
          in: path
          required: true
          description: Number of headers to return (max 2100)
          schema:
            type: integer
            minimum: 1
            maximum: 2100
        - name: tip
          in: query
          description: Block ID to start from (defaults to canonical tip)
          schema:
            type: string
      responses:
        "200":
          description: Array of block headers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    consensus_hash:
                      type: string
                      description: Consensus hash of the sortition
                    header:
                      type: string
                      description: Hex-encoded raw block header
                    parent_block_id:
                      type: string
                      description: Block ID of the parent block
                example:
                  - consensus_hash: "dff37af13badf99683228e61c71585bb7a82ac92"
                    header: "0600000047ddfbee8c..."
                    parent_block_id: "e0cb2be07552556f856503d2fbd855a27d49dc5a8c47fb2d9f0314eb6bad6861"
        "404":
          description: Tip block not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "NoSuchBlock"

  /v2/blocks/{block_id}:
    get:
      summary: Get Stacks 2.x block by ID
      tags:
        - Blocks
      operationId: get_block
      description: |
        Get a specific Stacks 2.x era block by its block ID. This endpoint streams the block data
        from the filesystem storage where traditional Stacks blocks are stored as individual files.

        **Compatibility**: Works with all Stacks 2.x blocks. For Nakamoto blocks (Stacks 3.x+), use `/v3/blocks/{block_id}`.
      parameters:
        - name: block_id
          in: path
          required: true
          description: Hex-encoded block ID (64 characters)
          schema:
            type: string
            pattern: "^[0-9a-f]{64}$"
      responses:
        "200":
          description: The block data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Block not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "NoSuchBlock"

  /v2/neighbors:
    get:
      summary: Get neighbor peers
      tags:
        - Network
      operationId: get_neighbors
      description: |
        Get information about the node's neighbor peers in the network.
      responses:
        "200":
          description: List of neighbor peers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    peer_id:
                      type: string
                    address:
                      type: string
                    port:
                      type: integer
                example:
                  - peer_id: "SP2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKNRV9EJ7"
                    address: "127.0.0.1"
                    port: 20444

  /v3/tenures/fork_info/{start}/{stop}:
    get:
      summary: Get tenure fork information
      tags:
        - Blocks
      operationId: get_tenures_fork_info
      description: |
        Get information about tenure forking between two consensus hashes.
        This is used to identify conflicting tenures in the Nakamoto consensus.
      parameters:
        - name: start
          in: path
          required: true
          description: Starting consensus hash (40 characters)
          schema:
            type: string
            pattern: "^[0-9a-f]{40}$"
        - name: stop
          in: path
          required: true
          description: Stopping consensus hash (40 characters)
          schema:
            type: string
            pattern: "^[0-9a-f]{40}$"
      responses:
        "200":
          description: Tenure fork information
          content:
            application/json:
              schema:
                type: object
                properties:
                  fork_info:
                    type: array
                    items:
                      type: object
                      properties:
                        consensus_hash:
                          type: string
                        tenure_id:
                          type: string
                        blocks:
                          type: array
                          items:
                            type: string
                example:
                  fork_info:
                    - consensus_hash: "abc123..."
                      tenure_id: "def456..."
                      blocks: ["block1", "block2"]

  /v3/tenures/tip/{consensus_hash}:
    get:
      summary: Get tenure tip
      tags:
        - Blocks
      operationId: get_tenure_tip
      description: |
        Get the tip block of a tenure identified by consensus hash.
      parameters:
        - name: consensus_hash
          in: path
          required: true
          description: Consensus hash (40 characters)
          schema:
            type: string
            pattern: "^[0-9a-f]{40}$"
      responses:
        "200":
          description: Tenure tip block information
          content:
            application/json:
              schema:
                type: object
                properties:
                  tip_block_id:
                    type: string
                  consensus_hash:
                    type: string
                  height:
                    type: integer
                example:
                  tip_block_id: "abc123..."
                  consensus_hash: "def456..."
                  height: 12345

  /v2/transactions/unconfirmed/{txid}:
    get:
      summary: Get unconfirmed transaction
      tags:
        - Transactions
      operationId: get_transaction_unconfirmed
      description: |
        Get an unconfirmed transaction by its transaction ID.
        This looks in both the mempool and unconfirmed microblock stream.
      parameters:
        - name: txid
          in: path
          required: true
          description: Transaction ID (64 hex characters)
          schema:
            type: string
            pattern: "^[0-9a-f]{64}$"
      responses:
        "200":
          description: Unconfirmed transaction details
          content:
            application/json:
              schema:
                type: object
                properties:
                  tx:
                    type: string
                    description: Hex-encoded transaction data
                  status:
                    oneOf:
                      - type: object
                        properties:
                          Microblock:
                            type: object
                            properties:
                              block_hash:
                                type: string
                                description: Block hash containing the microblock
                              seq:
                                type: integer
                                description: Microblock sequence number
                      - type: string
                        enum: ["Mempool"]
                example:
                  tx: "800000000004..."
                  status:
                    Microblock:
                      block_hash: "abc123..."
                      seq: 1
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "Transaction not found in mempool or unconfirmed microblock stream"

  /v2/blocks/upload/{consensus_hash}:
    post:
      summary: Upload a Stacks block
      tags:
        - Blocks
      operationId: post_block
      description: |
        Upload a Stacks block to the node for processing.
        The block must be in binary format and associated with the given consensus hash.
      parameters:
        - name: consensus_hash
          in: path
          required: true
          description: Consensus hash (40 hex characters)
          schema:
            type: string
            pattern: "^[0-9a-f]{40}$"
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: Binary-encoded Stacks block
      responses:
        "200":
          description: Block upload result
          content:
            application/json:
              schema:
                type: object
                properties:
                  stacks_block_id:
                    type: string
                    description: The ID of the uploaded block
                  accepted:
                    type: boolean
                    description: Whether the block was accepted
                example:
                  stacks_block_id: "abc123..."
                  accepted: true
        "400":
          description: Invalid block data
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "Failed to deserialize posted block"
        "404":
          description: Unknown consensus hash
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "Unrecognized consensus hash"

  /v2/mempool/query:
    post:
      summary: Query mempool for missing transactions
      tags:
        - Mempool
      operationId: post_mempool_query
      description: |
        Query the mempool for transactions that might be missing from the requesting node.
        This endpoint supports pagination and streaming of transaction data.
      parameters:
        - name: page_id
          in: query
          description: Transaction ID to start pagination from
          schema:
            type: string
            pattern: "^[0-9a-f]{64}$"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Mempool sync data query
              # Note: The exact schema depends on MemPoolSyncData structure
              properties:
                transactions:
                  type: array
                  items:
                    type: string
                    description: Transaction IDs
              example:
                transactions: ["abc123...", "def456..."]
      responses:
        "200":
          description: Stream of missing transactions
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: |
                  Binary stream of transactions and pagination data.
                  The stream contains serialized transactions followed by a page ID for continuation.

  /v3/blocks/upload:
    post:
      summary: Upload a Nakamoto block
      tags:
        - Blocks
      operationId: post_block_v3
      description: |
        Upload a Nakamoto block to the node for processing.

        **Authentication (`bearerAuth` scheme) is required IF the `broadcast` query parameter is set to "1".**
        If `broadcast` is not "1" or is omitted, authentication is not required for this endpoint.
      parameters:
        - name: broadcast
          in: query
          description: |
            Whether to broadcast the block to the network.
            **If set to "1", authentication is required.**
          schema:
            type: string
            enum: ["1"]
          required: false # It's optional, defaulting to not broadcasting / no auth needed
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: Binary-encoded Nakamoto block
      responses:
        "200":
          description: Block upload result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  stacks_block_id:
                    type: string
                    description: The ID of the uploaded block
                  accepted:
                    type: boolean
                    description: Whether the block was accepted
                example:
                  stacks_block_id: "abc123..."
                  accepted: true
        "400":
          description: Invalid block data.
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "Failed to deserialize posted block"
        "401":
          description: Authentication required because `broadcast=1` was specified, but authentication failed or was missing.
          content:
            application/json:
              schema:
                $ref: ./api/core-node/api-error.schema.json
              example:
                error: "Unauthorized"
